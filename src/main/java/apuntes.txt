
DTO: usabamos este concepto para filtrar que es lo que le queremos mostrar al cliente
DTO: es una forma para evitar usar todos los elementos de las clases , solo utilizo lo necesario
    debido a que si utilizo todo y llamo a referencias a cada uno de ellos, se me llena la memoria


proyecciones: ES LO QUE NOS DsA SPRING
que voy a mostra de un objeto dado?
 -> creo clase DTOAlumno

 --> agregar apellido para hacer pruebitas
 -- y constructor donde lo contemple e instanciarlos en


 Navegador se conecta mediante el protocolo HTTP 8080 --> a la App que corre uno o mas servicios
 entonces la base de datos mediante el puerto 3306 de mysql / 9000 postgres

 --> entonces recordemos, hay capas ... del navegador  a la app es x un puerto
 y para acceder a la base de datos es x otro puerto
 --> no se puede acceder directamente del navegador a la base de datos de un mismo puerto

el cliente se conecta a la api y la api a la base de datos
 ---------------------------------

mediante application.properties
    * le digo el puerto, la base de datos, que tipo de base de datos
   y recien con esto me conecto al a bbdd

JPA basicamente es el ORM -- JAVA PERSISTENCE API --

JDBC --> forma en la cual se comunica con una SQL
    ES UNA ESPECIFICACION O CONJUNTO DE INTERFACES
    no tienen implementancion
        entonces cada uno hace su reinterpretacion
        MYSQL --> implementa un driver JDBC
        ORACLE
        DB2
        POSTGRES
JPA tambien es una especificaion, pero de ORM, de como persistir objetos
JPA es un proveedor ORM
    --> entityManager ==> @Entity
  * hibernate  ==> Session / SessionFactory
  * EclipseLink ==> se llamara de otra forma


--------------------------------------- 6-10-22

yo le tengo que decir a la app si debo borrar o no
y el borrado se debe hacer en objetos persistentes

ademas el borrado de la base de datos es algo del negocio


cuando ejecuto un metodo al objeto
x.actualizar() con cascadas bien configuradas
    * no hace falta hacerle un persist
con tenerle una anotacion @transactional es suficiente

-------------------
el error 500 de POSTMAN es un error de get. que quiere traer algo pero no puede


------------------------------------------
POSTMAN
{
    "nombre": "unamateriaFlopa",
    "anio":2,
    "correlativas":[
        {
            "id":2,
            "nombre": "DDS"
        }
    ]
}

SI QUIERO INGRESAR UN POST a correlativas uno espara otra materia
pero no peudo pasarle por datos de la materia o solo por el id
sino por el link referenciado
: --> "http://localhost:8080/materias/2"


----------------------------------
como envio datos a los metodos post-put-delete?
con BODY - QUERYPARAMS - URL


veamos en este caso las correlativas que son medio chosco
GET /materias/14
post / correltativas?materiaId=14&correlativa=1
post / correlativas?materiaId=14&correlativa=12

   otra forma
  post /materias/{materiaId}/correlativas
       body -> {materiaId=14}
       al body lo manejo yo como lo quiero enviar
-------------------------------------
no hace falta el save o persist, por que spring lo hace solo si tengo
todo bien hecho


-------------------------------------
en MateriasControllerComplement
van los codigos para validar cosas
hasta cierto punto se encarga esta clase
una vez que tengo los objetos listos, todos los demas deberian ser validaciones
de capas de negocios
ya que por ejemplo yo quiero solo agregar correlativas pero validaciones
como: materias ya existente , materia ya es correlativa, etc etc etc
deberian estar en la capa del dominio